{
  "version": 3,
  "sources": ["../../../app/routes/dogs.create.tsx"],
  "sourcesContent": ["import type { DataFunctionArgs } from \"@remix-run/node\";\nimport { json, redirect } from \"@remix-run/node\";\nimport { useLoaderData } from \"@remix-run/react\";\nimport { withZod } from \"@remix-validated-form/with-zod\";\nimport { ValidatedForm, validationError } from \"remix-validated-form\";\nimport { route } from \"routes-gen\";\nimport { z } from \"zod\";\n\nimport { Input } from \"~/components/Input\";\nimport { db } from \"~/db/config.server\";\nimport { dogs } from \"~/db/schema.server\";\n\nconst validator = withZod(\n  z.object({\n    name: z.string().min(1).max(34),\n    breed: z.string().min(1).max(34),\n  })\n);\n\nexport const loader = () => {\n  return json({\n    defaultValues: {\n      name: \"\",\n      breed: \"\",\n    },\n  });\n};\n\nexport const action = async ({ request }: DataFunctionArgs) => {\n  const fieldValues = await validator.validate(await request.formData());\n  if (fieldValues.error) return validationError(fieldValues.error);\n\n  db.insert(dogs).values(fieldValues.data).run();\n\n  return redirect(route(\"/dogs\"));\n};\n\nexport default function DogInsertion() {\n  const { defaultValues } = useLoaderData<typeof loader>();\n\n  return (\n    <div className=\"flex justify-center items-center h-screen\">\n  <div className=\"mt-0\">\n    <div className=\"mb-8\">\n      <h2 className=\"mb-2 text-xl\">Add a new Dog</h2>\n      <p className=\"text-gray-600\">Add your dog's name and breed</p>\n    </div>\n\n    <ValidatedForm\n      className=\"space-y-6\"\n      method=\"POST\"\n      validator={validator}\n      defaultValues={defaultValues}\n    >\n      <Input name=\"name\" label=\"Name\" placeholder=\"Name\" />\n      <Input name=\"breed\" label=\"Breed\" placeholder=\"Breed\" />\n\n      <button className=\"btn btn-accent\" type=\"submit\">\n        Submit\n      </button>\n    </ValidatedForm>\n  </div>\n</div>\n  );\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAEA;AACA,sBAAwB;AACxB;AACA,wBAAsB;AAItB,oBAAmB;AACnB,oBAAqB;AAkCf;AAhCN,IAAM,gBAAY;AAAA,EAChB,EAAE,OAAO;AAAA,IACP,MAAM,EAAE,OAAO,EAAE,IAAI,CAAC,EAAE,IAAI,EAAE;AAAA,IAC9B,OAAO,EAAE,OAAO,EAAE,IAAI,CAAC,EAAE,IAAI,EAAE;AAAA,EACjC,CAAC;AACH;AAoBe,SAAR,eAAgC;AACrC,QAAM,EAAE,cAAc,IAAI,cAA6B;AAEvD,SACE,mDAAC,SAAI,WAAU,6CACjB,6DAAC,SAAI,WAAU,QACb;AAAA,uDAAC,SAAI,WAAU,QACb;AAAA,yDAAC,QAAG,WAAU,gBAAe,6BAA7B;AAAA;AAAA;AAAA;AAAA,aAA0C;AAAA,MAC1C,mDAAC,OAAE,WAAU,iBAAgB,6CAA7B;AAAA;AAAA;AAAA;AAAA,aAA0D;AAAA,SAF5D;AAAA;AAAA;AAAA;AAAA,WAGA;AAAA,IAEA;AAAA,MAAC;AAAA;AAAA,QACC,WAAU;AAAA,QACV,QAAO;AAAA,QACP;AAAA,QACA;AAAA,QAEA;AAAA,6DAAC,SAAM,MAAK,QAAO,OAAM,QAAO,aAAY,UAA5C;AAAA;AAAA;AAAA;AAAA,iBAAmD;AAAA,UACnD,mDAAC,SAAM,MAAK,SAAQ,OAAM,SAAQ,aAAY,WAA9C;AAAA;AAAA;AAAA;AAAA,iBAAsD;AAAA,UAEtD,mDAAC,YAAO,WAAU,kBAAiB,MAAK,UAAS,sBAAjD;AAAA;AAAA;AAAA;AAAA,iBAEA;AAAA;AAAA;AAAA,MAXF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAYA;AAAA,OAlBF;AAAA;AAAA;AAAA;AAAA,SAmBA,KApBE;AAAA;AAAA;AAAA;AAAA,SAqBJ;AAEA;",
  "names": []
}
